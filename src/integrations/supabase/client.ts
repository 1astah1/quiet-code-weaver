
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tskvrnrctesqmctyncad.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRza3ZybnJjdGVzcW1jdHluY2FkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg1MTgzNjMsImV4cCI6MjA2NDA5NDM2M30.w8FwPznqG_vo_ADXnM6LxpWGDbn3cogR8AaRF5ajYQ0";

// Улучшенная конфигурация клиента с настройками для стабильности
export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: true,
    flowType: 'pkce',
    // Добавляем больше времени для OAuth потоков
    debug: process.env.NODE_ENV === 'development'
  },
  realtime: {
    params: {
      eventsPerSecond: 2
    }
  },
  db: {
    schema: 'public'
  },
  global: {
    headers: {
      'X-Client-Info': 'fastmarket-cs2-app'
    }
  }
});

// Функция для очистки состояния аутентификации
export const cleanupAuthState = () => {
  if (typeof window === 'undefined') return;
  
  try {
    // Удаляем все ключи Supabase из localStorage
    Object.keys(localStorage).forEach((key) => {
      if (key.startsWith('supabase.') || key.includes('sb-')) {
        localStorage.removeItem(key);
      }
    });
    
    // Удаляем из sessionStorage если используется
    if (sessionStorage) {
      Object.keys(sessionStorage).forEach((key) => {
        if (key.startsWith('supabase.') || key.includes('sb-')) {
          sessionStorage.removeItem(key);
        }
      });
    }
  } catch (error) {
    console.warn('Error cleaning auth state:', error);
  }
};
