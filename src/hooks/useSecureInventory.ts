import { useState } from 'react';
import { supabase } from '@/integrations/supabase/client';
import type { SafeSellSkinResponse } from '@/types/rpc';

export const useSecureInventory = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const sellSkin = async (inventoryItemId: string, skinPrice: number, userId: string) => {
    try {
      setIsLoading(true);
      setError(null);

      console.log('üí∞ [SECURE_INVENTORY] Starting skin sale:', { 
        inventoryItemId, 
        skinPrice, 
        userId 
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!inventoryItemId || !userId || skinPrice <= 0) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–∫–∏–Ω–∞');
      }

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
      const { data, error: sellError } = await supabase.rpc('safe_sell_skin', {
        p_user_id: userId,
        p_inventory_id: inventoryItemId,
        p_sell_price: skinPrice
      });

      if (sellError) {
        console.error('‚ùå [SECURE_INVENTORY] RPC error:', sellError);
        throw new Error(sellError.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
      }

      if (!data) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }

      // –¢–∏–ø–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç RPC —Ñ—É–Ω–∫—Ü–∏–∏
      const result = data as unknown as SafeSellSkinResponse;

      if (!result.success) {
        throw new Error('–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }

      console.log('‚úÖ [SECURE_INVENTORY] Skin sold successfully:', {
        newBalance: result.new_balance,
        soldPrice: skinPrice
      });

      return { 
        success: true, 
        newBalance: result.new_balance 
      };
    } catch (err) {
      console.error('üí• [SECURE_INVENTORY] Error selling skin:', err);
      const errorMessage = err instanceof Error ? err.message : (typeof err === 'string' ? err : JSON.stringify(err));
      setError(errorMessage);
      return { 
        success: false, 
        error: errorMessage 
      };
    } finally {
      setIsLoading(false);
    }
  };

  return {
    sellSkin,
    isLoading,
    error,
    clearError: () => setError(null)
  };
};
