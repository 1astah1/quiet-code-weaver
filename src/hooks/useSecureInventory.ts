
import { useState, useCallback, useRef } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useQuery, useQueryClient } from '@tanstack/react-query';
import { clientRateLimit } from '@/utils/simpleRateLimit';

export const useSecureInventory = () => {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const queryClient = useQueryClient();
  const sellInProgress = useRef(false);

  const sellSkin = useCallback(async (inventoryItemId: string, userId: string) => {
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–ª–∏–∫–∏
    if (sellInProgress.current) {
      console.log('‚è≥ [SELL] Sale already in progress, ignoring');
      return { success: false, error: '–û–ø–µ—Ä–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' };
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
    const rateLimitKey = `sell_${userId}`;
    if (!clientRateLimit.checkLimit(rateLimitKey, 5, 30000)) {
      return { success: false, error: '–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.' };
    }

    sellInProgress.current = true;
    setIsLoading(true);
    setError(null);

    try {
      console.log('üí∞ [SELL] Starting skin sale:', {
        inventoryItemId,
        userId
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!inventoryItemId || !userId) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–∫–∏–Ω–∞');
      }

      // –û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI - —Å–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      queryClient.setQueryData(['user-inventory', userId], (oldData: any) => {
        if (!oldData) return oldData;
        return oldData.filter((item: any) => item.id !== inventoryItemId);
      });

      // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏
      const { data, error: sellError } = await supabase.rpc('final_sell_item', {
        p_inventory_id: inventoryItemId,
        p_user_id: userId
      });

      if (sellError) {
        console.error('‚ùå [SELL] RPC error:', sellError);
        
        // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        queryClient.invalidateQueries({ queryKey: ['user-inventory', userId] });
        
        throw new Error(sellError.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
      }

      if (!data || data.length === 0) {
        queryClient.invalidateQueries({ queryKey: ['user-inventory', userId] });
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }
      
      const result = data[0];

      if (!result.success) {
        console.error('üìâ [SELL] Sale failed:', result.message);
        queryClient.invalidateQueries({ queryKey: ['user-inventory', userId] });
        throw new Error(result.message || '–û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–µ –±—ã–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
      }

      console.log('‚úÖ [SELL] Skin sold successfully:', {
        newBalance: result.new_balance,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã
      queryClient.invalidateQueries({ queryKey: ['user-balance', userId] });

      return {
        success: true,
        newBalance: result.new_balance
      };
    } catch (err) {
      console.error('üí• [SELL] Error selling skin:', err);
      const errorMessage = err instanceof Error ? err.message : (typeof err === 'string' ? err : JSON.stringify(err));
      setError(errorMessage);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      queryClient.invalidateQueries({ queryKey: ['user-inventory', userId] });
      
      return {
        success: false,
        error: errorMessage
      };
    } finally {
      setIsLoading(false);
      sellInProgress.current = false;
    }
  }, [queryClient]);

  return {
    sellSkin,
    isLoading,
    error,
    clearError: () => setError(null)
  };
};

export function useUserInventory(userId: string) {
  return useQuery({
    queryKey: ['user-inventory', userId],
    queryFn: async () => {
      if (!userId) {
        throw new Error('User ID is required');
      }

      console.log('üîç [INVENTORY] Loading inventory for user:', userId);

      try {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –ø–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤
        const { data, error } = await supabase
          .from('user_inventory')
          .select(`
            *,
            skins (
              id,
              name,
              weapon_type,
              rarity,
              price,
              image_url
            )
          `)
          .eq('user_id', userId)
          .eq('is_sold', false)
          .order('obtained_at', { ascending: false });
        
        if (error) {
          console.error('‚ùå [INVENTORY] Error loading inventory:', error);
          throw error;
        }
        
        console.log('‚úÖ [INVENTORY] Loaded inventory items:', data?.length || 0);
        return data || [];
      } catch (err) {
        console.error('üí• [INVENTORY] Critical error:', err);
        throw err;
      }
    },
    refetchOnWindowFocus: false, // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    refetchOnMount: true,
    staleTime: 30000, // –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
    retry: (failureCount: number, error: any) => {
      // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö RLS
      if (error && typeof error === 'object' && 'code' in error && error.code === '21000') {
        return false;
      }
      return failureCount < 2;
    },
  });
}
