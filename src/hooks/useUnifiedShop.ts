import { useState, useCallback, useRef } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/components/ui/toast';
import { clientRateLimit } from '@/utils/simpleRateLimit';

interface Skin {
  id: string;
  name: string;
  weapon_type: string;
  rarity: string;
  price: number;
  image_url: string | null;
}

interface CurrentUser {
  id: string;
  coins: number;
  is_admin?: boolean;
}

// –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º
export const useBalanceManager = (userId: string) => {
  const queryClient = useQueryClient();

  const syncBalance = useCallback(async (): Promise<number> => {
    console.log('üí∞ [BALANCE] Syncing balance from database...');
    
    const { data, error } = await supabase
      .from('users')
      .select('coins')
      .eq('id', userId)
      .single();

    if (error) {
      console.error('‚ùå [BALANCE] Failed to sync:', error);
      throw error;
    }

    const newBalance = data.coins || 0;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    queryClient.setQueryData(['user-balance', userId], newBalance);
    
    console.log('‚úÖ [BALANCE] Synced:', newBalance);
    return newBalance;
  }, [userId, queryClient]);

  const updateBalance = useCallback((newBalance: number) => {
    console.log('üí∞ [BALANCE] Updating balance to:', newBalance);
    queryClient.setQueryData(['user-balance', userId], newBalance);
  }, [userId, queryClient]);

  return { syncBalance, updateBalance };
};

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø–æ–∫—É–ø–æ–∫
export const useUnifiedPurchase = (currentUser: CurrentUser, onCoinsUpdate: (coins: number) => void) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { syncBalance } = useBalanceManager(currentUser.id);
  const purchaseInProgress = useRef(false);

  const purchaseMutation = useMutation({
    mutationFn: async (skin: Skin) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏
      if (purchaseInProgress.current) {
        throw new Error('–ü–æ–∫—É–ø–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      }

      // Rate limiting (–º—è–≥–∫–∏–µ –ª–∏–º–∏—Ç—ã)
      const rateLimitKey = `purchase_${currentUser.id}`;
      if (!currentUser.is_admin && !clientRateLimit.checkLimit(rateLimitKey, 10, 60000)) {
        throw new Error('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
      }

      purchaseInProgress.current = true;

      console.log('üõí [PURCHASE] Starting purchase:', {
        skinName: skin.name,
        price: skin.price,
        userCoins: currentUser.coins,
        isAdmin: currentUser.is_admin
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      if (currentUser.coins < skin.price && !currentUser.is_admin) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ ${skin.price}, —É –≤–∞—Å ${currentUser.coins}`);
      }

      // –í—ã–∑–æ–≤ RPC —Ñ—É–Ω–∫—Ü–∏–∏
      const { data, error } = await supabase.rpc('purchase_skin', {
        p_user_id: currentUser.id,
        p_skin_id: skin.id
      });

      if (error) {
        console.error('‚ùå [PURCHASE] RPC error:', error);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
      }

      const response = data as any;
      
      if (!response?.success) {
        throw new Error(response?.error || '–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }

      console.log('‚úÖ [PURCHASE] Success:', response);

      return {
        newBalance: response.new_balance,
        inventoryId: response.inventory_id,
        skin
      };
    },
    onSuccess: async (data) => {
      purchaseInProgress.current = false;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ callback
      onCoinsUpdate(data.newBalance);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] }),
        queryClient.invalidateQueries({ queryKey: ['user-balance', currentUser.id] })
      ]);

      toast({
        title: "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
        description: `${data.skin.name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`,
      });
    },
    onError: (error: any) => {
      purchaseInProgress.current = false;
      
      console.error('üö® [PURCHASE] Error:', error);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É",
        variant: "destructive",
      });
    }
  });

  return {
    purchaseMutation,
    isPurchasing: purchaseMutation.isPending
  };
};

// –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö—É–∫ –¥–ª—è –ø—Ä–æ–¥–∞–∂
export const useUnifiedSale = (currentUser: CurrentUser, onCoinsUpdate: (coins: number) => void) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { syncBalance } = useBalanceManager(currentUser.id);
  const sellInProgress = useRef(false);

  const sellMutation = useMutation({
    mutationFn: async (inventoryItemId: string) => {
      // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏
      if (sellInProgress.current) {
        throw new Error('–ü—Ä–æ–¥–∞–∂–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
      }

      // Rate limiting
      const rateLimitKey = `sell_${currentUser.id}`;
      if (!currentUser.is_admin && !clientRateLimit.checkLimit(rateLimitKey, 10, 30000)) {
        throw new Error('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
      }

      sellInProgress.current = true;

      console.log('üí∞ [SELL] Starting sale:', {
        inventoryItemId,
        userId: currentUser.id
      });

      // –í—ã–∑–æ–≤ RPC —Ñ—É–Ω–∫—Ü–∏–∏
      const { data, error } = await supabase.rpc('final_sell_item', {
        p_inventory_id: inventoryItemId,
        p_user_id: currentUser.id
      });

      if (error) {
        console.error('‚ùå [SELL] RPC error:', error);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
      }

      if (!data || data.length === 0) {
        throw new Error('–°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏');
      }

      const result = data[0];

      if (!result.success) {
        throw new Error(result.message || '–ü—Ä–æ–¥–∞–∂–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å');
      }

      console.log('‚úÖ [SELL] Success:', result);

      return {
        newBalance: result.new_balance,
        inventoryItemId
      };
    },
    onSuccess: async (data) => {
      sellInProgress.current = false;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ callback
      onCoinsUpdate(data.newBalance);
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] }),
        queryClient.invalidateQueries({ queryKey: ['user-balance', currentUser.id] })
      ]);

      toast({
        title: "–ü—Ä–æ–¥–∞–∂–∞ —É—Å–ø–µ—à–Ω–∞!",
        description: "–°–∫–∏–Ω –ø—Ä–æ–¥–∞–Ω, –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω",
      });
    },
    onError: (error: any) => {
      sellInProgress.current = false;
      
      console.error('üö® [SELL] Error:', error);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
      queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] });
      
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω",
        variant: "destructive",
      });
    }
  });

  return {
    sellMutation,
    isSelling: sellMutation.isPending
  };
};

// –•—É–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
export const useUnifiedInventory = (userId: string) => {
  return useQuery({
    queryKey: ['user-inventory', userId],
    queryFn: async () => {
      console.log('üì¶ [INVENTORY] Loading inventory for user:', userId);

      const { data, error } = await supabase
        .from('user_inventory')
        .select(`
          *,
          skins (
            id,
            name,
            weapon_type,
            rarity,
            price,
            image_url
          )
        `)
        .eq('user_id', userId)
        .eq('is_sold', false)
        .order('obtained_at', { ascending: false });

      if (error) {
        console.error('‚ùå [INVENTORY] Error:', error);
        throw error;
      }

      console.log('‚úÖ [INVENTORY] Loaded:', data?.length || 0, 'items');
      return data || [];
    },
    refetchOnWindowFocus: false,
    staleTime: 10000, // 10 —Å–µ–∫—É–Ω–¥
    retry: 2
  });
};