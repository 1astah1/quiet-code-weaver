import { useState, useEffect, useCallback } from 'react';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { useQueryClient } from '@tanstack/react-query';
import { SafeSellCaseRewardResponse } from '@/types/rpc';

export interface CaseOpeningResult {
  success: boolean;
  reward?: any;
  inventory_id?: string;
  new_balance?: number;
  roulette_items?: any[];
  winner_position?: number;
  error?: string;
  required?: number;
  current?: number;
  next_available?: string;
}

interface UseCaseOpeningFixedProps {
  caseItem: any;
  currentUser: {
    id: string;
    username: string;
    coins: number;
  };
  onCoinsUpdate: (newCoins: number) => void;
}

export const useCaseOpeningFixed = ({ 
  caseItem, 
  currentUser, 
  onCoinsUpdate 
}: UseCaseOpeningFixedProps) => {
  const [wonSkin, setWonSkin] = useState<any>(null);
  const [wonCoins, setWonCoins] = useState<number>(0);
  const [isComplete, setIsComplete] = useState(false);
  const [animationPhase, setAnimationPhase] = useState<'opening' | 'roulette' | 'complete'>('opening');
  const [isProcessing, setIsProcessing] = useState(false);
  const [caseSkins, setCaseSkins] = useState<any[]>([]);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [rouletteData, setRouletteData] = useState<any>(null);

  const { toast } = useToast();
  const queryClient = useQueryClient();

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ–π—Å –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (caseItem?.id && currentUser?.id) {
      openCase();
    }
  }, [caseItem?.id, currentUser?.id]);

  const openCase = async () => {
    try {
      setIsLoading(true);
      setError(null);
      console.log('üéÆ [CASE_OPENING_FIXED] Opening case:', caseItem?.name);

      const { data, error } = await supabase.rpc('safe_open_case', {
        p_user_id: currentUser.id,
        p_case_id: caseItem.id,
        p_skin_id: null,
        p_coin_reward_id: null,
        p_is_free: false,
        p_ad_watched: false
      });

      if (error) {
        console.error('‚ùå [CASE_OPENING_FIXED] RPC error:', error);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å');
      }

      const result = data as unknown as CaseOpeningResult;
      console.log('‚úÖ [CASE_OPENING_FIXED] Case opened successfully:', result);

      if (!result.success) {
        throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä—É–ª–µ—Ç–∫–∏
      if (result.roulette_items && result.winner_position !== undefined) {
        setRouletteData({
          items: result.roulette_items,
          winnerPosition: result.winner_position
        });
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
      if (result.new_balance !== undefined) {
        onCoinsUpdate(result.new_balance);
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
      if (result.reward) {
        if (result.reward.type === 'coin_reward') {
          setWonCoins(result.reward.amount || 0);
        } else {
          setWonSkin(result.reward);
        }
      }

      setIsLoading(false);
      
      // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
      setTimeout(() => {
        setAnimationPhase('roulette');
      }, 1000);

    } catch (error: any) {
      console.error('üí• [CASE_OPENING_FIXED] Case opening failed:', error);
      setError(error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      setIsLoading(false);
    }
  };

  const handleRouletteComplete = useCallback(() => {
    console.log('üéØ [CASE_OPENING_FIXED] Roulette complete');
    setAnimationPhase('complete');
    setIsComplete(true);
  }, []);

  const addToInventory = async () => {
    if (!wonSkin) return;
    
    setIsProcessing(true);
    try {
      console.log('üì¶ [CASE_OPENING_FIXED] Adding skin to inventory');
      // –õ–æ–≥–∏–∫–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ RPC —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—Ö
      toast({
        title: "–°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
        description: `${wonSkin.name} —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ`,
      });
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] });
    } catch (error: any) {
      console.error('‚ùå [CASE_OPENING_FIXED] Failed to add to inventory:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const sellDirectly = async () => {
    if (!wonSkin) return;
    
    setIsProcessing(true);
    try {
      console.log('üí∞ [CASE_OPENING_FIXED] Selling skin directly for price:', wonSkin.price);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏–∑ –∫–µ–π—Å–∞
      const { data, error } = await supabase.rpc('safe_sell_case_reward', {
        p_user_id: currentUser.id,
        p_skin_id: wonSkin.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID —Å–∫–∏–Ω–∞, –∞ –Ω–µ inventory_id
        p_sell_price: wonSkin.price // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É —Å–∫–∏–Ω–∞
      });

      if (error) {
        console.error('‚ùå [CASE_OPENING_FIXED] RPC error:', error);
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
      }

      const result = data as unknown as SafeSellCaseRewardResponse;
      console.log('‚úÖ [CASE_OPENING_FIXED] Sell result:', result);
      
      if (result.success && result.new_balance !== undefined) {
        onCoinsUpdate(result.new_balance);
        toast({
          title: "–°–∫–∏–Ω –ø—Ä–æ–¥–∞–Ω!",
          description: `–ü–æ–ª—É—á–µ–Ω–æ ${wonSkin.price} –º–æ–Ω–µ—Ç`,
        });
        
        // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à–∏
        queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] });
        queryClient.invalidateQueries({ queryKey: ['user-balance', currentUser.id] });
      } else {
        throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
      }
    } catch (error: any) {
      console.error('‚ùå [CASE_OPENING_FIXED] Failed to sell skin:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  return {
    wonSkin,
    wonCoins,
    isComplete,
    animationPhase,
    isProcessing,
    addToInventory,
    sellDirectly,
    caseSkins,
    error,
    isLoading,
    rouletteData,
    handleRouletteComplete
  };
};
