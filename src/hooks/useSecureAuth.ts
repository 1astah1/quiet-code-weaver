
import { useEffect, useState } from 'react';
import { useAuth } from '@/hooks/useAuth';
import { secureAuditLog, SecurityValidator } from '@/utils/securityValidation';

// –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ö—É–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
export const useSecureAuth = () => {
  console.log('üîê [SECURE_AUTH] Hook mounting/rendering');
  
  const { user, isLoading } = useAuth();
  const [isSecurityVerified, setIsSecurityVerified] = useState(false);
  const [securityWarnings, setSecurityWarnings] = useState<string[]>([]);

  console.log('üìä [SECURE_AUTH] Current state:', {
    hasUser: !!user,
    userId: user?.id,
    isLoading,
    isSecurityVerified,
    warningsCount: securityWarnings.length
  });

  useEffect(() => {
    if (!user) {
      console.log('‚ùå [SECURE_AUTH] No user, resetting security state');
      setIsSecurityVerified(false);
      return;
    }

    console.log('üîç [SECURE_AUTH] Starting security verification for user:', user.id);

    const verifyUserSecurity = async () => {
      try {
        const warnings: string[] = [];

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (!SecurityValidator.validateUUID(user.id)) {
          console.error('üö® [SECURE_AUTH] Invalid user ID format:', user.id);
          warnings.push('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          await secureAuditLog(user.id, 'invalid_user_id', {}, false, 'high');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏
        const sessionStart = sessionStorage.getItem('session_start');
        if (!sessionStart) {
          console.log('üîÑ [SECURE_AUTH] Setting new session start time');
          sessionStorage.setItem('session_start', Date.now().toString());
        } else {
          const sessionDuration = Date.now() - parseInt(sessionStart);
          console.log('‚è±Ô∏è [SECURE_AUTH] Session duration check:', {
            sessionStart,
            currentTime: Date.now(),
            duration: sessionDuration,
            durationHours: sessionDuration / (60 * 60 * 1000)
          });
          
          if (sessionDuration > 24 * 60 * 60 * 1000) { // –ë–æ–ª–µ–µ 24 —á–∞—Å–æ–≤
            console.warn('‚ö†Ô∏è [SECURE_AUTH] Long session detected:', sessionDuration);
            warnings.push('–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –¥–æ–ª–≥–∞—è —Å–µ—Å—Å–∏—è');
            await secureAuditLog(user.id, 'long_session_detected', { duration: sessionDuration }, true, 'medium');
          }
        }

        console.log('üìä [SECURE_AUTH] Security verification results:', {
          warningsCount: warnings.length,
          warnings,
          isVerified: warnings.length === 0
        });

        setSecurityWarnings(warnings);
        setIsSecurityVerified(warnings.length === 0);

        if (warnings.length === 0) {
          console.log('‚úÖ [SECURE_AUTH] Security verification passed');
          await secureAuditLog(user.id, 'security_verification_passed', {});
        } else {
          console.warn('‚ö†Ô∏è [SECURE_AUTH] Security verification failed with warnings:', warnings);
        }
      } catch (error) {
        console.error('üí• [SECURE_AUTH] Security verification error:', error);
        setSecurityWarnings(['–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏']);
        setIsSecurityVerified(false);
      }
    };

    verifyUserSecurity();
  }, [user]);

  console.log('üîê [SECURE_AUTH] Hook returning:', {
    hasUser: !!user,
    isLoading,
    isSecurityVerified,
    securityWarnings: securityWarnings.length
  });

  return {
    user,
    isLoading,
    isSecurityVerified,
    securityWarnings
  };
};
