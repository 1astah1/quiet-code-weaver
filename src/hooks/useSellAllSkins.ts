
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";

export const useSellAllSkins = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ userId }: { userId: string }) => {
      console.log('üõí [SELL_ALL] Starting sell all process for user:', userId);
      
      try {
        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–æ–¥–∞–∂–∏ –≤—Å–µ—Ö —Å–∫–∏–Ω–æ–≤
        const { data, error } = await supabase.rpc('sell_all_user_skins', {
          p_user_id: userId
        });

        if (error) {
          console.error('‚ùå [SELL_ALL] Error:', error);
          throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –≤—Å–µ —Å–∫–∏–Ω—ã');
        }

        console.log('‚úÖ [SELL_ALL] Success:', data);
        return {
          totalValue: data.total_earned,
          itemCount: data.items_sold
        };
      } catch (error) {
        console.error('üí• [SELL_ALL] Sell all operation failed:', error);
        throw error;
      }
    },
    onSuccess: async (data, variables) => {
      console.log('üéâ [SELL_ALL] Mutation success, invalidating queries...');
      
      await queryClient.invalidateQueries({ queryKey: ['user-inventory', variables.userId] });
      await queryClient.invalidateQueries({ queryKey: ['current-user'] });
      
      toast({
        title: "–í—Å–µ —Å–∫–∏–Ω—ã –ø—Ä–æ–¥–∞–Ω—ã!",
        description: `–ü—Ä–æ–¥–∞–Ω–æ ${data.itemCount} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ ${data.totalValue} –º–æ–Ω–µ—Ç`,
      });
      
      return data.totalValue;
    },
    onError: (error: any) => {
      console.error('üö® [SELL_ALL] Mutation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –≤—Å–µ —Å–∫–∏–Ω—ã",
        variant: "destructive",
      });
    }
  });
};
