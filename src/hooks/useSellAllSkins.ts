
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { isValidUUID } from "@/utils/uuid";

export const useSellAllSkins = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ userId }: { userId: string }) => {
      console.log('üõí [SELL_ALL] Starting sell all process for user:', userId);
      
      if (!isValidUUID(userId)) {
        throw new Error('–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      }

      try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ–¥–∞–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const { data: inventoryItems, error: inventoryError } = await supabase
          .from('user_inventory')
          .select(`
            id,
            skins!inner (
              price
            )
          `)
          .eq('user_id', userId)
          .eq('is_sold', false);

        if (inventoryError) {
          console.error('‚ùå [SELL_ALL] Error fetching inventory:', inventoryError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
        }

        if (!inventoryItems || inventoryItems.length === 0) {
          throw new Error('–í –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏');
        }

        console.log('üì¶ [SELL_ALL] Found items to sell:', inventoryItems.length);

        // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        const totalValue = inventoryItems.reduce((sum, item) => sum + (item.skins?.price || 0), 0);
        console.log('üí∞ [SELL_ALL] Total value:', totalValue);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
        const { data: sellResult, error: sellError } = await supabase.rpc('sell_all_user_skins', {
          p_user_id: userId
        });

        if (sellError) {
          console.error('‚ùå [SELL_ALL] RPC error:', sellError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã: ' + sellError.message);
        }

        console.log('‚úÖ [SELL_ALL] All items sold successfully:', sellResult);
        return { 
          totalValue: sellResult.total_earned || totalValue, 
          itemCount: sellResult.items_sold || inventoryItems.length 
        };
      } catch (error) {
        console.error('üí• [SELL_ALL] Sell all operation failed:', error);
        throw error;
      }
    },
    onSuccess: async (data, variables) => {
      console.log('üéâ [SELL_ALL] Mutation success, invalidating queries...');
      
      await queryClient.invalidateQueries({ queryKey: ['user-inventory', variables.userId] });
      await queryClient.refetchQueries({ queryKey: ['user-inventory', variables.userId] });
      
      toast({
        title: "–í—Å–µ —Å–∫–∏–Ω—ã –ø—Ä–æ–¥–∞–Ω—ã!",
        description: `–ü—Ä–æ–¥–∞–Ω–æ ${data.itemCount} –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω–∞ ${data.totalValue} –º–æ–Ω–µ—Ç`,
      });
      
      return data.totalValue;
    },
    onError: (error: any) => {
      console.error('üö® [SELL_ALL] Mutation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –ø—Ä–æ–¥–∞–∂–∏",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å –≤—Å–µ —Å–∫–∏–Ω—ã",
        variant: "destructive",
      });
    }
  });
};
