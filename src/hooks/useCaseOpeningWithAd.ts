
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { generateUUID, isValidUUID } from "@/utils/uuid";

export interface CaseOpeningWithAdResult {
  success: boolean;
  reward?: any;
  inventory_id?: string;
  new_balance?: number;
  roulette_items?: any[];
  winner_position?: number;
  error?: string;
  required?: number;
  current?: number;
  next_available?: string;
}

export const useCaseOpeningWithAd = () => {
  const queryClient = useQueryClient();
  const { toast } = useToast();

  return useMutation({
    mutationFn: async ({ 
      userId, 
      caseId, 
      isFree = false,
      adWatched = false,
      skinId = null,
      coinRewardId = null
    }: { 
      userId: string; 
      caseId: string; 
      isFree?: boolean;
      adWatched?: boolean;
      skinId?: string | null;
      coinRewardId?: string | null;
    }) => {
      try {
        console.log('üéÆ [CASE_OPENING_AD] Starting case opening with ad:', { 
          userId, 
          caseId, 
          isFree, 
          adWatched,
          skinId,
          coinRewardId
        });
        
        if (!isValidUUID(userId) || !isValidUUID(caseId)) {
          throw new Error('–û—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
        }

        // –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∫–ª–∞–º—ã
        if (isFree && !adWatched) {
          return {
            success: false,
            error: 'Ad view required for free case'
          };
        }

        const { data, error } = await supabase.rpc('safe_open_case', {
          p_user_id: userId,
          p_case_id: caseId,
          p_skin_id: skinId,
          p_coin_reward_id: coinRewardId,
          p_is_free: isFree,
          p_ad_watched: adWatched
        });

        if (error) {
          console.error('‚ùå [CASE_OPENING_AD] RPC error:', error);
          throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å');
        }

        const result = data as CaseOpeningWithAdResult;
        console.log('‚úÖ [CASE_OPENING_AD] Case opened successfully:', result);
        
        return result;
      } catch (error) {
        console.error('üí• [CASE_OPENING_AD] Case opening failed:', error);
        throw error;
      }
    },
    onSuccess: async (data, variables) => {
      if (data.success) {
        console.log('üéâ [CASE_OPENING_AD] Invalidating queries after successful opening...');
        
        await Promise.all([
          queryClient.invalidateQueries({ queryKey: ['user-inventory', variables.userId] }),
          queryClient.invalidateQueries({ queryKey: ['user-balance', variables.userId] }),
          queryClient.invalidateQueries({ queryKey: ['recent-wins'] }),
          queryClient.invalidateQueries({ queryKey: ['cases'] })
        ]);

        toast({
          title: "–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç!",
          description: data.reward?.type === 'coin_reward' 
            ? `–ü–æ–ª—É—á–µ–Ω–æ ${data.reward.amount} –º–æ–Ω–µ—Ç` 
            : `–ü–æ–ª—É—á–µ–Ω —Å–∫–∏–Ω: ${data.reward?.name}`,
        });
      } else {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –±–µ–∑ –ø–æ–∫–∞–∑–∞ toast, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ UI
        console.log('‚ö†Ô∏è [CASE_OPENING_AD] Case opening failed:', data.error);
      }
    },
    onError: (error: any) => {
      console.error('üö® [CASE_OPENING_AD] Mutation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å",
        variant: "destructive",
      });
    }
  });
};
