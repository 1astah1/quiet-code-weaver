
import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { enhancedValidation, SecurityMonitor, secureOperation } from "@/utils/securityEnhanced";
import type { SafePurchaseSkinResponse } from "@/types/rpc";

interface Skin {
  id: string;
  name: string;
  weapon_type: string;
  rarity: string;
  price: number;
  image_url: string | null;
}

export const useSecureShop = (currentUser: { id: string; coins: number }) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const purchaseMutation = useMutation({
    mutationFn: async (skin: Skin) => {
      console.log('üõí [SECURE_SHOP] Starting secure purchase:', { 
        skinName: skin.name, 
        skinPrice: skin.price, 
        userCoins: currentUser.coins, 
        userId: currentUser.id 
      });

      return await secureOperation(
        async () => {
          // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          if (!enhancedValidation.uuid(currentUser.id)) {
            throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
          }

          if (!enhancedValidation.uuid(skin.id)) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–∫–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          }

          if (!enhancedValidation.skinPrice(skin.price)) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–∫–∏–Ω–∞.');
          }

          if (currentUser.coins < skin.price) {
            throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ ${skin.price}, —É –≤–∞—Å ${currentUser.coins}`);
          }

          // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
          if (!SecurityMonitor.checkClientRateLimit(currentUser.id, 'purchase_skin', 3)) {
            throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.');
          }

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∞–Ω–æ–º–∞–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
          if (SecurityMonitor.detectAnomalousActivity(currentUser.id, 'purchase', skin.price)) {
            throw new Error('–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.');
          }

          console.log('üì° [SECURE_SHOP] Calling RPC function...');

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é RPC —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
          const { data, error } = await supabase.rpc('safe_purchase_skin', {
            p_user_id: currentUser.id,
            p_skin_id: skin.id,
            p_skin_price: skin.price
          });

          if (error) {
            console.error('‚ùå [SECURE_SHOP] RPC purchase error:', error);
            
            // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
            await SecurityMonitor.logSuspiciousActivity(
              currentUser.id, 
              'purchase_error', 
              { error: error.message, skinId: skin.id, price: skin.price },
              'medium'
            );
            
            throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
          }

          // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø
          const response = data as unknown as SafePurchaseSkinResponse;
          
          if (!response?.success) {
            const errorMsg = response?.error || '–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å';
            
            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–µ—É–¥–∞—á–Ω—É—é –ø–æ–∫—É–ø–∫—É
            await SecurityMonitor.logSuspiciousActivity(
              currentUser.id, 
              'purchase_failed', 
              { error: errorMsg, skinId: skin.id, price: skin.price },
              'low'
            );
            
            throw new Error(errorMsg);
          }

          console.log('‚úÖ [SECURE_SHOP] Purchase successful:', {
            newBalance: response.new_balance,
            inventoryId: response.inventory_id
          });

          return { 
            newCoins: response.new_balance!, 
            purchasedSkin: skin,
            inventoryId: response.inventory_id!
          };
        },
        currentUser.id,
        'purchase_skin',
        { skinId: skin.id, price: skin.price }
      );
    },
    onSuccess: async (data) => {
      console.log('üéâ [SECURE_SHOP] Purchase completed successfully');
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] }),
        queryClient.refetchQueries({ queryKey: ['user-inventory', currentUser.id] })
      ]);
      
      toast({
        title: "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
        description: `${enhancedValidation.sanitizeString(data.purchasedSkin.name)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å`,
      });

      return data;
    },
    onError: async (error: any) => {
      console.error('üö® [SECURE_SHOP] Purchase error:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–∫—É–ø–∫–∏
      await SecurityMonitor.logSuspiciousActivity(
        currentUser.id, 
        'purchase_mutation_error', 
        { error: error.message },
        'medium'
      );

      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
        description: enhancedValidation.sanitizeString(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É"),
        variant: "destructive",
      });
    }
  });

  return {
    purchaseMutation,
    isPurchasing: purchaseMutation.isPending
  };
};
