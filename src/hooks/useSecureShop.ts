import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/components/ui/use-toast";
import { useEnhancedSecurity } from "@/hooks/useEnhancedSecurity";
import type { SafePurchaseSkinResponse } from "@/types/rpc";

interface Skin {
  id: string;
  name: string;
  weapon_type: string;
  rarity: string;
  price: number;
  image_url: string | null;
}

interface CurrentUser {
  id: string;
  coins: number;
  is_admin?: boolean;
}

export const useSecureShop = (currentUser: CurrentUser) => {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const { 
    checkRateLimit, 
    validateInput, 
    sanitizeString, 
    logSuspiciousActivity,
    isAdmin 
  } = useEnhancedSecurity(currentUser);

  const purchaseMutation = useMutation({
    mutationFn: async (skin: Skin) => {
      console.log('üõí [SECURE_SHOP] Starting secure purchase:', { 
        skinName: skin.name, 
        skinPrice: skin.price, 
        userCoins: currentUser.coins, 
        userId: currentUser.id,
        isAdmin 
      });

      // –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
      if (isAdmin) {
        console.log('üëë [SECURE_SHOP] Admin user detected, bypassing most security checks');
        
        const { data, error } = await (supabase.rpc as any)('purchase_skin', {
          p_user_id: currentUser.id,
          p_skin_id: skin.id
        });

        if (error) {
          console.error('‚ùå [SECURE_SHOP] Admin RPC purchase error:', error);
          throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
        }

        const response = data as unknown as SafePurchaseSkinResponse;
        
        if (!response?.success) {
          const errorMsg = response?.error || '–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å';
          throw new Error(errorMsg);
        }

        return { 
          newCoins: response.new_balance!, 
          purchasedSkin: skin,
          inventoryId: response.inventory_id!
        };
      }

      // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (!validateInput(currentUser.id, 'uuid')) {
        throw new Error('–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
      }

      if (!validateInput(skin.id, 'uuid')) {
        throw new Error('–û—à–∏–±–∫–∞ —Å–∫–∏–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }

      if (!validateInput(skin.price, 'coins')) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Ü–µ–Ω–∞ —Å–∫–∏–Ω–∞.');
      }

      if (currentUser.coins < skin.price) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ ${skin.price}, —É –≤–∞—Å ${currentUser.coins}`);
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit —Å –±–æ–ª–µ–µ –º—è–≥–∫–∏–º–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
      const canProceed = await checkRateLimit('purchase_skin', 5, 10); // 5 –ø–æ–∫—É–ø–æ–∫ –∑–∞ 10 –º–∏–Ω—É—Ç
      if (!canProceed) {
        throw new Error('–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–∫—É–ø–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–æ–π.');
      }

      console.log('üì° [SECURE_SHOP] Calling RPC function...');

      const { data, error } = await (supabase.rpc as any)('purchase_skin', {
        p_user_id: currentUser.id,
        p_skin_id: skin.id
      });

      if (error) {
        console.error('‚ùå [SECURE_SHOP] RPC purchase error:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
        await logSuspiciousActivity('purchase_error', {
          error: error.message,
          skinId: skin.id,
          price: skin.price
        });
        
        throw new Error(error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É');
      }

      const response = data as unknown as SafePurchaseSkinResponse;
      
      if (!response?.success) {
        const errorMsg = response?.error || '–ü–æ–∫—É–ø–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å';
        
        await logSuspiciousActivity('purchase_failed', {
          error: errorMsg,
          skinId: skin.id,
          price: skin.price
        });
        
        throw new Error(errorMsg);
      }

      console.log('‚úÖ [SECURE_SHOP] Purchase successful:', {
        newBalance: response.new_balance,
        inventoryId: response.inventory_id
      });

      return { 
        newCoins: response.new_balance!, 
        purchasedSkin: skin,
        inventoryId: response.inventory_id!
      };
    },
    onSuccess: async (data) => {
      console.log('üéâ [SECURE_SHOP] Purchase completed successfully');
      
      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await Promise.all([
        queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] }),
        queryClient.refetchQueries({ queryKey: ['user-inventory', currentUser.id] })
      ]);
      
      const userType = isAdmin ? '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' : '–ø–æ–∫—É–ø–∞—Ç–µ–ª—å';
      toast({
        title: "–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!",
        description: `${sanitizeString(data.purchasedSkin.name)} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (${userType})`,
      });

      return data;
    },
    onError: async (error: any) => {
      console.error('üö® [SECURE_SHOP] Purchase error:', error);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–æ–∫—É–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤
      if (!isAdmin) {
        await logSuspiciousActivity('purchase_mutation_error', {
          error: error.message
        });
      }

      toast({
        title: "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏",
        description: sanitizeString(error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–∫—É–ø–∫—É"),
        variant: "destructive",
      });
    }
  });

  return {
    purchaseMutation,
    isPurchasing: purchaseMutation.isPending,
    isAdmin
  };
};
