
import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useQueryClient } from "@tanstack/react-query";
import { generateUUID } from "@/utils/uuid";

interface UseCaseOpeningProps {
  caseItem: any;
  currentUser: {
    id: string;
    username: string;
    coins: number;
  };
  onCoinsUpdate: (newCoins: number) => void;
}

export const useCaseOpening = ({ caseItem, currentUser, onCoinsUpdate }: UseCaseOpeningProps) => {
  const [isOpening, setIsOpening] = useState(false);
  const [wonSkin, setWonSkin] = useState<any>(null);
  const [isComplete, setIsComplete] = useState(false);
  const [animationPhase, setAnimationPhase] = useState<'opening' | 'revealing' | 'complete'>('opening');
  const [isProcessing, setIsProcessing] = useState(false);
  const [caseSkins, setCaseSkins] = useState<any[]>([]);
  const { toast } = useToast();
  const queryClient = useQueryClient();

  const openCase = async () => {
    if (isOpening) return;
    
    setIsOpening(true);
    setAnimationPhase('opening');

    try {
      console.log('Starting case opening for:', caseItem?.name);

      if (!currentUser?.id) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const { data: fetchedCaseSkins, error: caseSkinsError } = await supabase
        .from('case_skins')
        .select(`
          probability,
          custom_probability,
          never_drop,
          skins (*)
        `)
        .eq('case_id', caseItem.id)
        .eq('never_drop', false);

      if (caseSkinsError) {
        console.error('Error fetching case skins:', caseSkinsError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–µ–π—Å–∞');
      }

      if (!fetchedCaseSkins || fetchedCaseSkins.length === 0) {
        throw new Error('–í –∫–µ–π—Å–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
      }

      setCaseSkins(fetchedCaseSkins);
      console.log('Case skins loaded:', fetchedCaseSkins.length);

      const totalProbability = fetchedCaseSkins.reduce((sum, item) => {
        return sum + (item.custom_probability || item.probability || 0.01);
      }, 0);
      
      let random = Math.random() * totalProbability;
      let selectedSkin = fetchedCaseSkins[0];

      for (const skin of fetchedCaseSkins) {
        const probability = skin.custom_probability || skin.probability || 0.01;
        random -= probability;
        if (random <= 0) {
          selectedSkin = skin;
          break;
        }
      }

      if (!selectedSkin?.skins) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–∫–∏–Ω');
      }

      console.log('Selected skin:', selectedSkin.skins.name);

      // –£–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–æ–≤–æ–π –∞–Ω–∏–º–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è (3 —Å–µ–∫—É–Ω–¥—ã)
      setTimeout(() => {
        setAnimationPhase('revealing');
        setWonSkin(selectedSkin.skins);
      }, 3000);
      
      // –û–±—â–µ–µ –≤—Ä–µ–º—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 8 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        setAnimationPhase('complete');
        setIsComplete(true);
        setIsOpening(false);

        toast({
          title: "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!",
          description: `–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${selectedSkin.skins.name}!`,
        });
      }, 8000);

    } catch (error) {
      console.error('Case opening error:', error);
      setIsOpening(false);
      setAnimationPhase('opening');
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å",
        variant: "destructive",
      });
    }
  };

  const addToInventory = async () => {
    if (!wonSkin || isProcessing) return;
    
    setIsProcessing(true);
    try {
      console.log('Adding to inventory:', wonSkin.name);

      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, coins')
        .eq('id', currentUser.id)
        .single();

      if (userError) {
        console.error('User check error:', userError);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      const { error: inventoryError } = await supabase
        .from('user_inventory')
        .insert({
          id: generateUUID(),
          user_id: currentUser.id,
          skin_id: wonSkin.id,
          obtained_at: new Date().toISOString(),
          is_sold: false
        });

      if (inventoryError) {
        console.error('Inventory error:', inventoryError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
      try {
        await supabase
          .from('recent_wins')
          .insert({
            id: generateUUID(),
            user_id: currentUser.id,
            skin_id: wonSkin.id,
            case_id: caseItem.id,
            won_at: new Date().toISOString()
          });
      } catch (error) {
        console.error('Recent win error (non-critical):', error);
      }

      // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤
      if (!caseItem.is_free) {
        const newCoins = userData.coins - caseItem.price;
        if (newCoins < 0) {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç');
        }

        const { error: coinsError } = await supabase
          .from('users')
          .update({ coins: newCoins })
          .eq('id', currentUser.id);

        if (coinsError) {
          console.error('Coins update error:', coinsError);
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –º–æ–Ω–µ—Ç—ã');
        }
        
        onCoinsUpdate(newCoins);
      }

      // –í–ê–ñ–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–µ—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
      await queryClient.invalidateQueries({ queryKey: ['user-inventory', currentUser.id] });
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      await queryClient.refetchQueries({ queryKey: ['user-inventory', currentUser.id] });

      console.log('Successfully added to inventory and invalidated cache');

      toast({
        title: "–°–∫–∏–Ω –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å!",
        description: `${wonSkin.name} —Ç–µ–ø–µ—Ä—å –≤ –≤–∞—à–∏—Ö –≤—ã–∏–≥—Ä—ã—à–∞—Ö`,
      });

    } catch (error) {
      console.error('Add to inventory error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  const sellDirectly = async () => {
    if (!wonSkin || isProcessing) return;
    
    setIsProcessing(true);
    try {
      console.log('Selling directly:', wonSkin.name);

      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id, coins')
        .eq('id', currentUser.id)
        .single();

      if (userError) {
        console.error('User check error:', userError);
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }

      const sellPrice = wonSkin.price || 0;
      let newCoins = userData.coins + sellPrice;
      
      // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã –∑–∞ –∫–µ–π—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–ª–∞—Ç–Ω—ã—Ö –∫–µ–π—Å–æ–≤
      if (!caseItem.is_free) {
        newCoins -= caseItem.price;
        if (newCoins < 0) {
          throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–µ–π—Å–∞');
        }
      }

      const { error: coinsError } = await supabase
        .from('users')
        .update({ coins: newCoins })
        .eq('id', currentUser.id);

      if (coinsError) {
        console.error('Coins update error:', coinsError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–µ–¥–∞–≤–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–∏
      try {
        await supabase
          .from('recent_wins')
          .insert({
            id: generateUUID(),
            user_id: currentUser.id,
            skin_id: wonSkin.id,
            case_id: caseItem.id,
            won_at: new Date().toISOString()
          });
      } catch (error) {
        console.error('Recent win error (non-critical):', error);
      }

      onCoinsUpdate(newCoins);

      toast({
        title: "–°–∫–∏–Ω –ø—Ä–æ–¥–∞–Ω!",
        description: `–ü–æ–ª—É—á–µ–Ω–æ ${sellPrice} –º–æ–Ω–µ—Ç –∑–∞ ${wonSkin.name}`,
      });

    } catch (error) {
      console.error('Sell directly error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: error instanceof Error ? error.message : "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω",
        variant: "destructive",
      });
    } finally {
      setIsProcessing(false);
    }
  };

  useEffect(() => {
    if (!caseItem || !currentUser) {
      console.error('Missing required props');
      return;
    }
    
    openCase();
  }, [caseItem?.id, currentUser?.id]);

  return {
    isOpening,
    wonSkin,
    isComplete,
    animationPhase,
    isProcessing,
    caseSkins,
    addToInventory,
    sellDirectly
  };
};
