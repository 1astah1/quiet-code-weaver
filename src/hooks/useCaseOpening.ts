import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { supabase } from '@/integrations/supabase/client';
import { useCaseOpeningLogger } from './useCaseOpeningLogger';
import { useSecureCaseOpening } from './useSecureCaseOpening';
import type { CaseSkin } from '@/utils/supabaseTypes';

interface UseCaseOpeningProps {
  caseItem: any;
  currentUser: {
    id: string;
    username: string;
    coins: number;
  };
  onCoinsUpdate: (newCoins: number) => void;
}

export const useCaseOpening = ({ caseItem, currentUser, onCoinsUpdate }: UseCaseOpeningProps) => {
  const [wonSkin, setWonSkin] = useState<any>(null);
  const [wonCoins, setWonCoins] = useState(0);
  const [isComplete, setIsComplete] = useState(false);
  const [animationPhase, setAnimationPhase] = useState<'opening' | 'revealing' | 'bonus' | null>('opening');
  const [isProcessing, setIsProcessing] = useState(false);
  const [showBonusRoulette, setShowBonusRoulette] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const { logCaseOpening } = useCaseOpeningLogger();
  const secureCaseOpening = useSecureCaseOpening();

  const { data: caseSkins = [], isLoading } = useQuery({
    queryKey: ['case-skins', caseItem?.id],
    queryFn: async () => {
      if (!caseItem?.id) return [];
      
      try {
        console.log('üîç [CASE_OPENING] Loading skins for case:', caseItem.id);
        
        const { data, error } = await supabase
          .from('case_skins')
          .select(`
            id,
            probability,
            custom_probability,
            never_drop,
            reward_type,
            skins!inner (
              id,
              name,
              weapon_type,
              rarity,
              price,
              image_url
            )
          `)
          .eq('case_id', caseItem.id)
          .eq('never_drop', false)
          .not('skins', 'is', null);
        
        if (error) {
          console.error('‚ùå [CASE_OPENING] Error loading case skins:', error);
          throw new Error(`Failed to load case contents: ${error.message}`);
        }
        
        const transformedData: CaseSkin[] = (data || []).map(item => ({
          id: item.id,
          probability: item.probability || 0.01,
          custom_probability: item.custom_probability,
          never_drop: item.never_drop || false,
          reward_type: item.reward_type || 'skin',
          skins: item.skins
        })).filter(item => item.skins);
        
        console.log('‚úÖ [CASE_OPENING] Loaded case skins:', transformedData.length);
        
        if (transformedData.length === 0) {
          throw new Error('–≠—Ç–æ—Ç –∫–µ–π—Å –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
        }
        
        return transformedData;
      } catch (error) {
        console.error('üí• [CASE_OPENING] Case skins query error:', error);
        throw error;
      }
    },
    enabled: !!caseItem?.id,
    retry: 2,
    staleTime: 30000
  });

  useEffect(() => {
    if (caseItem && currentUser && caseSkins.length > 0 && !error) {
      startCaseOpening();
    }
  }, [caseItem, currentUser, caseSkins, error]);

  const startCaseOpening = async () => {
    console.log('üöÄ [CASE_OPENING] Starting case opening for:', caseItem.name);
    setError(null);
    setAnimationPhase('opening');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ—Ç–∫—Ä—ã—Ç–∏–µ–º –ø–ª–∞—Ç–Ω–æ–≥–æ –∫–µ–π—Å–∞
    if (!caseItem.is_free && currentUser.coins < caseItem.price) {
      setError(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç. –ù—É–∂–Ω–æ: ${caseItem.price}, —É –≤–∞—Å: ${currentUser.coins}`);
      setAnimationPhase(null);
      return;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è
    setTimeout(() => {
      setAnimationPhase('revealing');
      simulateCaseResult();
    }, 2000);
  };

  const simulateCaseResult = async () => {
    if (caseSkins.length === 0) {
      console.error('‚ùå [CASE_OPENING] No skins available for case');
      setError('–í –∫–µ–π—Å–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤');
      return;
    }

    try {
      console.log('üéØ [CASE_OPENING] Selecting random skin from', caseSkins.length, 'options');
      
      // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–∏–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
      let totalProbability = caseSkins.reduce((sum, skin) => sum + (skin.probability || 0.01), 0);
      let random = Math.random() * totalProbability;
      let selectedSkin = caseSkins[0]; // fallback
      
      for (const skin of caseSkins) {
        random -= (skin.probability || 0.01);
        if (random <= 0) {
          selectedSkin = skin;
          break;
        }
      }

      if (selectedSkin.skins) {
        console.log('üéÅ [CASE_OPENING] Selected skin:', selectedSkin.skins.name);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞
        const result = await secureCaseOpening.mutateAsync({
          userId: currentUser.id,
          caseId: caseItem.id,
          skinId: selectedSkin.skins.id,
          isFree: caseItem.is_free || false
        });

        if (result.success && result.skin) {
          console.log('‚úÖ [CASE_OPENING] Case opened successfully, skin received:', result.skin.name);
          setWonSkin(result.skin);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–µ–π—Å –ø–ª–∞—Ç–Ω—ã–π
          if (!caseItem.is_free && caseItem.price) {
            const newCoins = Math.max(0, currentUser.coins - caseItem.price);
            onCoinsUpdate(newCoins);
            console.log('üí∞ [CASE_OPENING] Balance updated from', currentUser.coins, 'to', newCoins);
          }
          
          // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ
          await logCaseOpening({
            user_id: currentUser.id,
            case_id: caseItem.id,
            case_name: caseItem.name,
            is_free: caseItem.is_free || false,
            phase: 'complete',
            reward_type: 'skin',
            reward_data: result.skin
          });
        } else {
          console.error('‚ùå [CASE_OPENING] Case opening failed - no result');
          setError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          setWonSkin(selectedSkin.skins); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∏–Ω –∫–∞–∫ fallback
        }
      }
    } catch (error) {
      console.error('üí• [CASE_OPENING] Error in simulateCaseResult:', error);
      setError(error instanceof Error ? error.message : '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
      
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å–∫–∏–Ω –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
      const randomIndex = Math.floor(Math.random() * caseSkins.length);
      const fallbackSkin = caseSkins[randomIndex];
      if (fallbackSkin?.skins) {
        setWonSkin(fallbackSkin.skins);
      }
    }

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
      setIsComplete(true);
      setAnimationPhase(null);
    }, 3000);
  };

  const addToInventory = async () => {
    setIsProcessing(true);
    try {
      console.log('üì¶ [CASE_OPENING] Skin already added to inventory by RPC function');
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è UX
      await new Promise(resolve => setTimeout(resolve, 1000));
      console.log('‚úÖ [CASE_OPENING] Inventory action completed');
    } catch (error) {
      console.error('‚ùå [CASE_OPENING] Error in addToInventory:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å');
    } finally {
      setIsProcessing(false);
    }
  };

  const sellDirectly = async () => {
    setIsProcessing(true);
    try {
      if (wonSkin) {
        console.log('üí∞ [CASE_OPENING] Selling skin directly for', wonSkin.price, 'coins');
        const newCoins = currentUser.coins + wonSkin.price;
        onCoinsUpdate(newCoins);
        console.log('‚úÖ [CASE_OPENING] Direct sale completed, new balance:', newCoins);
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è UX
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    } catch (error) {
      console.error('‚ùå [CASE_OPENING] Error in sellDirectly:', error);
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–∞—Ç—å —Å–∫–∏–Ω');
    } finally {
      setIsProcessing(false);
    }
  };

  const handleBonusComplete = (multiplier: number, finalCoins: number) => {
    const newCoins = currentUser.coins + finalCoins;
    onCoinsUpdate(newCoins);
    setIsComplete(true);
  };

  const handleBonusSkip = () => {
    const newCoins = currentUser.coins + wonCoins;
    onCoinsUpdate(newCoins);
    setIsComplete(true);
  };

  const handleFreeCaseResult = (result: any) => {
    if (result.type === 'skin') {
      setWonSkin(result);
    } else {
      setWonCoins(result.amount);
    }
    setTimeout(() => {
      setIsComplete(true);
      setAnimationPhase(null);
    }, 2000);
  };

  return {
    wonSkin,
    wonCoins,
    isComplete,
    animationPhase,
    isProcessing,
    showBonusRoulette,
    addToInventory,
    sellDirectly,
    caseSkins,
    error,
    isLoading,
    handleBonusComplete,
    handleBonusSkip,
    handleFreeCaseResult
  };
};
