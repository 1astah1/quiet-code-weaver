import { useMutation, useQueryClient } from "@tanstack/react-query";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/components/ui/toast";

interface WithdrawSkinParams {
  inventoryItemId: string;
  steamTradeUrl: string;
}

export const useWithdrawSkin = () => {
  const { toast } = useToast();
  const queryClient = useQueryClient();

  return useMutation({
    mutationFn: async ({ inventoryItemId, steamTradeUrl }: WithdrawSkinParams) => {
      console.log('üéÆ [WITHDRAW_SKIN] Starting withdrawal:', { inventoryItemId, steamTradeUrl });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è Trade URL
      if (!steamTradeUrl.includes('steamcommunity.com') || !steamTradeUrl.includes('tradeoffer')) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Steam Trade URL');
      }

      // –í—ã–∑—ã–≤–∞–µ–º Edge Function –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞
      const { data, error } = await supabase.functions.invoke('withdraw-skin', {
        body: {
          inventoryItemId,
          steamTradeUrl
        }
      });

      if (error) {
        console.error('‚ùå [WITHDRAW_SKIN] Edge function error:', error);
        throw new Error(error.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–µ–π–¥–∞');
      }

      if (!data || !data.success) {
        console.error('‚ùå [WITHDRAW_SKIN] Withdrawal failed:', data);
        throw new Error(data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–π–¥');
      }

      console.log('‚úÖ [WITHDRAW_SKIN] Withdrawal successful:', data);
      return data;
    },
    onSuccess: (data) => {
      toast({
        title: "–¢—Ä–µ–π–¥ —Å–æ–∑–¥–∞–Ω!",
        description: `–°–∫–∏–Ω "${data.skinName}" –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Steam. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–π–¥—ã –≤ Steam.`,
        duration: 5000,
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
      queryClient.invalidateQueries({ queryKey: ['user-inventory'] });
    },
    onError: (error: Error) => {
      console.error('üí• [WITHDRAW_SKIN] Mutation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞",
        description: error.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≤–µ—Å—Ç–∏ —Å–∫–∏–Ω",
        variant: "destructive",
      });
    }
  });
}; 