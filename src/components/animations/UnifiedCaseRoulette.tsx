
import { useState, useEffect } from "react";
import LazyImage from "@/components/ui/LazyImage";

interface RouletteItem {
  id: string;
  name: string;
  weapon_type?: string;
  rarity?: string;
  price: number;
  image_url?: string | null;
  type: 'skin' | 'coin_reward';
  amount?: number;
}

interface UnifiedCaseRouletteProps {
  rouletteItems: RouletteItem[];
  winnerPosition: number;
  onComplete: (winnerItem: RouletteItem) => void;
}

const UnifiedCaseRoulette = ({ 
  rouletteItems, 
  winnerPosition, 
  onComplete 
}: UnifiedCaseRouletteProps) => {
  const [isSpinning, setIsSpinning] = useState(false);
  const [translateX, setTranslateX] = useState(0);

  useEffect(() => {
    if (!rouletteItems || rouletteItems.length === 0) {
      console.error('‚ùå [ROULETTE] No roulette items provided');
      return;
    }

    console.log('üé∞ [ROULETTE] Starting with items:', rouletteItems.length);
    console.log('üéØ [ROULETTE] Winner position:', winnerPosition);
    console.log('üèÜ [ROULETTE] Winner item:', rouletteItems[winnerPosition]);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
    if (winnerPosition < 0 || winnerPosition >= rouletteItems.length) {
      console.error('‚ùå [ROULETTE] Invalid winner position:', winnerPosition);
      return;
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∞–Ω–∏–º–∞—Ü–∏–∏
    const startTimer = setTimeout(() => {
      setIsSpinning(true);
      
      // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ä–∞—Å—á–µ—Ç –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const itemWidth = 128; // —à–∏—Ä–∏–Ω–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (w-32)
      const itemMargin = 4; // margin (mx-1 = 4px —Å –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã)
      const totalItemWidth = itemWidth + itemMargin * 2; // –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏
      const containerCenter = window.innerWidth / 2;
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–π –Ω–∞–±–æ—Ä (–≤—Ç–æ—Ä–æ–π –∏–∑ —Ç—Ä–µ—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
      // –ü–æ–∑–∏—Ü–∏—è –≤ —Å—Ä–µ–¥–Ω–µ–º –Ω–∞–±–æ—Ä–µ = originalLength + winnerPosition
      const targetPosition = rouletteItems.length + winnerPosition;
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
      const finalPosition = -(targetPosition * totalItemWidth - containerCenter + totalItemWidth / 2);
      
      console.log('üéØ [ROULETTE] Calculated position:', {
        itemWidth,
        itemMargin,
        totalItemWidth,
        targetPosition,
        finalPosition
      });
      
      setTranslateX(finalPosition);
    }, 500);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 4 —Å–µ–∫—É–Ω–¥—ã
    const endTimer = setTimeout(() => {
      setIsSpinning(false);
      const winnerItem = rouletteItems[winnerPosition];
      console.log('üèÜ [ROULETTE] Animation complete, winner:', winnerItem?.name);
      
      if (winnerItem) {
        console.log('‚úÖ [ROULETTE] Calling onComplete with winner item');
        setTimeout(() => onComplete(winnerItem), 1000);
      } else {
        console.error('‚ùå [ROULETTE] Winner item not found at position:', winnerPosition);
      }
    }, 4000);

    return () => {
      clearTimeout(startTimer);
      clearTimeout(endTimer);
    };
  }, [rouletteItems, winnerPosition, onComplete]);

  if (!rouletteItems || rouletteItems.length === 0) {
    return (
      <div className="min-h-[400px] flex items-center justify-center">
        <div className="text-white text-xl">–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä—É–ª–µ—Ç–∫–∏...</div>
      </div>
    );
  }

  const getRarityColor = (rarity?: string) => {
    switch (rarity?.toLowerCase()) {
      case 'consumer': return 'border-gray-500';
      case 'industrial': return 'border-blue-500';
      case 'mil-spec': return 'border-purple-500';
      case 'restricted': return 'border-pink-500';
      case 'classified': return 'border-red-500';
      case 'covert': return 'border-yellow-500';
      default: return 'border-gray-500';
    }
  };

  return (
    <div className="space-y-8 p-4 bg-slate-900">
      <h2 className="text-3xl font-bold text-white text-center">–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É!</h2>
      
      <div className="relative overflow-hidden bg-slate-800 rounded-lg border-2 border-orange-500/50 h-40">
        {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π —É–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è */}
        <div className="absolute top-0 left-1/2 transform -translate-x-1/2 z-10">
          <div className="w-0 h-0 border-l-[20px] border-r-[20px] border-b-[25px] border-l-transparent border-r-transparent border-b-orange-500 drop-shadow-lg"></div>
          <div className="w-1 h-2 bg-orange-500 mx-auto"></div>
        </div>
        
        {/* –†—É–ª–µ—Ç–∫–∞ */}
        <div 
          className="flex transition-transform duration-3000 ease-out"
          style={{ 
            transform: `translateX(${translateX}px)`,
            transition: isSpinning ? 'transform 3s cubic-bezier(0.25, 0.46, 0.45, 0.94)' : 'none'
          }}
        >
          {/* –î—É–±–ª–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –±–µ—Å—à–æ–≤–Ω–æ–π –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ */}
          {[...rouletteItems, ...rouletteItems, ...rouletteItems].map((item, index) => (
            <div 
              key={`${item.id}-${index}`} 
              className={`flex-shrink-0 w-32 h-32 border-2 ${getRarityColor(item.rarity)} p-2 flex flex-col items-center justify-center bg-slate-700 mx-1`}
            >
              <div className="w-full h-20 flex items-center justify-center mb-1">
                {item.image_url ? (
                  <LazyImage
                    src={item.image_url}
                    alt={item.name}
                    className="w-full h-full object-contain"
                    fallback={
                      <div className="text-2xl">
                        {item.type === 'coin_reward' ? 'ü™ô' : 'üî´'}
                      </div>
                    }
                  />
                ) : (
                  <div className="text-2xl">
                    {item.type === 'coin_reward' ? 'ü™ô' : 'üî´'}
                  </div>
                )}
              </div>
              <div className="text-white text-xs text-center truncate w-full">
                {item.type === 'coin_reward' ? `${item.amount} –º–æ–Ω–µ—Ç` : item.name?.substring(0, 12)}
              </div>
            </div>
          ))}
        </div>
      </div>

      <div className="text-center">
        <p className="text-yellow-400 text-xl font-semibold animate-pulse">
          {isSpinning ? '–ö—Ä—É—Ç–∏–º —Ä—É–ª–µ—Ç–∫—É...' : '–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω!'}
        </p>
      </div>
    </div>
  );
};

export default UnifiedCaseRoulette;
