
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/components/ui/use-toast";

export const ensureBucketExists = async (bucketName: string, retries: number = 3): Promise<boolean> => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`ü™£ [BUCKET_CHECK] Attempt ${attempt}/${retries} - Checking bucket: ${bucketName}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket —á–µ—Ä–µ–∑ –ø–æ–ø—ã—Ç–∫—É –ª–∏—Å—Ç–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ)
      const { data, error } = await supabase.storage
        .from(bucketName)
        .list('', { limit: 1 });
      
      if (!error) {
        console.log(`‚úÖ [BUCKET_CHECK] Bucket ${bucketName} exists and accessible`);
        return true;
      }
      
      console.warn(`‚ö†Ô∏è [BUCKET_CHECK] Bucket ${bucketName} check failed:`, error);
      
      // –ï—Å–ª–∏ bucket –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–Ω–∞—á–∏—Ç –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–∏ RLS —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å)
      if (error.message.includes('not found') || error.message.includes('does not exist')) {
        console.log(`‚ùå [BUCKET_CHECK] Bucket ${bucketName} does not exist`);
        throw new Error(`Bucket ${bucketName} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`);
      }
      
      // –ï—Å–ª–∏ —ç—Ç–æ RLS –æ—à–∏–±–∫–∞, bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤
      if (error.message.includes('RLS') || error.message.includes('policy')) {
        console.log(`üîí [BUCKET_CHECK] RLS policy issue for bucket ${bucketName}`);
        throw new Error(`–ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ bucket ${bucketName}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞.`);
      }
      
      // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
      if (attempt === retries) {
        throw error;
      }
      
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
      
    } catch (error: any) {
      console.error(`‚ùå [BUCKET_ERROR] Attempt ${attempt}/${retries} failed:`, error);
      if (attempt === retries) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å bucket ${bucketName}: ${error.message}`);
      }
    }
  }
  
  return false;
};

export const uploadBannerImage = async (file: File): Promise<string> => {
  if (!file) throw new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
  
  const uploadTimeout = 45000;
  
  try {
    console.log('üñºÔ∏è [BANNER_UPLOAD] Starting banner image upload:', { 
      fileName: file.name, 
      fileSize: file.size, 
      fileType: file.type 
    });

    // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (file.size > 5 * 1024 * 1024) {
      throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
    }

    if (!file.type.startsWith('image/')) {
      throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
    }

    const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp', 'image/gif'];
    if (!allowedTypes.includes(file.type.toLowerCase())) {
      throw new Error('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, WebP, GIF');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    console.log('üîç [BANNER_UPLOAD] Ensuring bucket exists...');
    await ensureBucketExists('banner-images');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const fileExt = file.name.split('.').pop()?.toLowerCase() || 'jpg';
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(2, 15);
    const fileName = `banner_${timestamp}_${randomId}.${fileExt}`;
    const filePath = `banners/${fileName}`;

    console.log('üìÅ [BANNER_UPLOAD] Upload details:', { fileName, filePath, fileSize: file.size });

    // –°–æ–∑–¥–∞–µ–º Promise —Å timeout
    const uploadPromise = supabase.storage
      .from('banner-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });

    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞')), uploadTimeout);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å timeout
    const { data, error: uploadError } = await Promise.race([uploadPromise, timeoutPromise]) as any;

    if (uploadError) {
      console.error('‚ùå [BANNER_UPLOAD] Upload error:', uploadError);
      
      let errorMessage = uploadError.message;
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ RLS
      if (uploadError.message.includes('RLS') || uploadError.message.includes('policy')) {
        errorMessage = '–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–µ –ø—Ä–∞–≤–∞.';
      } else if (uploadError.message.includes('duplicate')) {
        errorMessage = '–§–∞–π–ª —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç';
      } else if (uploadError.message.includes('size')) {
        errorMessage = '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π';
      } else if (uploadError.message.includes('mime')) {
        errorMessage = '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞';
      }
      
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${errorMessage}`);
    }

    if (!data?.path) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É');
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: { publicUrl } } = supabase.storage
      .from('banner-images')
      .getPublicUrl(data.path);

    if (!publicUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
    }

    console.log('‚úÖ [BANNER_UPLOAD] Upload successful:', {
      path: data.path,
      publicUrl,
      fileSize: file.size
    });

    toast({ 
      title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
      description: `–§–∞–π–ª ${file.name} –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –æ–±–ª–∞–∫–æ`
    });
    
    return publicUrl;
    
  } catch (error: any) {
    console.error('‚ùå [BANNER_UPLOAD] Upload failed:', error);
    
    let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    
    if (error.message.includes('timeout') || error.message.includes('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ')) {
      errorMessage = "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞";
    } else if (error.message.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')) {
      errorMessage = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB";
    } else if (error.message.includes('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º') || error.message.includes('–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã')) {
      errorMessage = error.message;
    } else if (error.message.includes('bucket') || error.message.includes('RLS') || error.message.includes('policy')) {
      errorMessage = error.message;
    } else if (error.message.includes('network') || error.message.includes('fetch')) {
      errorMessage = "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É";
    } else {
      errorMessage = error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
    }
    
    toast({ 
      title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", 
      description: errorMessage,
      variant: "destructive" 
    });
    
    throw new Error(errorMessage);
  }
};
