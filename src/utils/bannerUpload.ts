
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export const ensureBucketExists = async (bucketName: string) => {
  try {
    console.log(`ü™£ [BUCKET_CHECK] Checking bucket: ${bucketName}`);
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ bucket
    const testFileName = `test_${Date.now()}.txt`;
    const { error: testError } = await supabase.storage
      .from(bucketName)
      .upload(testFileName, new Blob(['test']), { upsert: false });
    
    if (testError) {
      if (testError.message.includes('Bucket not found')) {
        console.log(`üÜï [BUCKET_CREATE] Creating bucket: ${bucketName}`);
        const { error: createError } = await supabase.storage.createBucket(bucketName, {
          public: true,
          allowedMimeTypes: ['image/*'],
          fileSizeLimit: 5242880 // 5MB
        });
        
        if (createError && !createError.message.includes('already exists')) {
          console.error('‚ùå [BUCKET_CREATE] Error creating bucket:', createError);
          throw createError;
        }
        
        console.log(`‚úÖ [BUCKET_CREATE] Bucket ${bucketName} created successfully`);
      } else {
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ bucket —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await supabase.storage.from(bucketName).remove([testFileName]);
        console.log(`‚úÖ [BUCKET_CHECK] Bucket ${bucketName} exists and accessible`);
      }
    } else {
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
      await supabase.storage.from(bucketName).remove([testFileName]);
      console.log(`‚úÖ [BUCKET_CHECK] Bucket ${bucketName} exists and accessible`);
    }
    
    return true;
  } catch (error: any) {
    console.error(`‚ùå [BUCKET_ERROR] Error with bucket ${bucketName}:`, error);
    throw new Error(`–û—à–∏–±–∫–∞ —Å bucket ${bucketName}: ${error.message}`);
  }
};

export const uploadBannerImage = async (file: File): Promise<string> => {
  if (!file) throw new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
  
  try {
    console.log('üñºÔ∏è [BANNER_UPLOAD] Starting banner image upload:', { 
      fileName: file.name, 
      fileSize: file.size, 
      fileType: file.type 
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (file.size > 5 * 1024 * 1024) {
      throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
    }

    if (!file.type.startsWith('image/')) {
      throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º bucket
    await ensureBucketExists('banner-images');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileExt = file.name.split('.').pop();
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(7);
    const fileName = `banner_${timestamp}_${randomId}.${fileExt}`;
    const filePath = `banners/${fileName}`;

    console.log('üìÅ [BANNER_UPLOAD] Upload details:', { fileName, filePath });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
    const { error: uploadError } = await supabase.storage
      .from('banner-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });

    if (uploadError) {
      console.error('‚ùå [BANNER_UPLOAD] Upload error:', uploadError);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: { publicUrl } } = supabase.storage
      .from('banner-images')
      .getPublicUrl(filePath);

    console.log('‚úÖ [BANNER_UPLOAD] Upload successful:', publicUrl);

    toast({ title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" });
    return publicUrl;
  } catch (error: any) {
    console.error('‚ùå [BANNER_UPLOAD] Upload failed:', error);
    toast({ 
      title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", 
      description: error.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
      variant: "destructive" 
    });
    throw error;
  }
};
