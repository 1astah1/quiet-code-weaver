
import { supabase } from "@/integrations/supabase/client";
import { toast } from "@/hooks/use-toast";

export const ensureBucketExists = async (bucketName: string, retries: number = 3): Promise<boolean> => {
  for (let attempt = 1; attempt <= retries; attempt++) {
    try {
      console.log(`ü™£ [BUCKET_CHECK] Attempt ${attempt}/${retries} - Checking bucket: ${bucketName}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º bucket —á–µ—Ä–µ–∑ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
      const { data: { publicUrl } } = supabase.storage
        .from(bucketName)
        .getPublicUrl('test');
      
      if (publicUrl) {
        console.log(`‚úÖ [BUCKET_CHECK] Bucket ${bucketName} exists and accessible`);
        return true;
      }
      
      // –ï—Å–ª–∏ publicUrl –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å bucket
      console.log(`üÜï [BUCKET_CREATE] Creating bucket: ${bucketName}`);
      const { error: createError } = await supabase.storage.createBucket(bucketName, {
        public: true,
        allowedMimeTypes: ['image/*'],
        fileSizeLimit: 5242880 // 5MB
      });
      
      if (createError) {
        if (createError.message.includes('already exists')) {
          console.log(`‚úÖ [BUCKET_CREATE] Bucket ${bucketName} already exists`);
          return true;
        } else {
          console.error(`‚ùå [BUCKET_CREATE] Attempt ${attempt} failed:`, createError);
          if (attempt === retries) throw createError;
          continue;
        }
      }
      
      console.log(`‚úÖ [BUCKET_CREATE] Bucket ${bucketName} created successfully`);
      return true;
      
    } catch (error: any) {
      console.error(`‚ùå [BUCKET_ERROR] Attempt ${attempt}/${retries} failed:`, error);
      if (attempt === retries) {
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø—Ä–æ–≤–µ—Ä–∏—Ç—å bucket ${bucketName}: ${error.message}`);
      }
      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 1000 * attempt));
    }
  }
  
  return false;
};

export const uploadBannerImage = async (file: File): Promise<string> => {
  if (!file) throw new Error('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω');
  
  const uploadTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥ timeout
  
  try {
    console.log('üñºÔ∏è [BANNER_UPLOAD] Starting banner image upload:', { 
      fileName: file.name, 
      fileSize: file.size, 
      fileType: file.type 
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (file.size > 5 * 1024 * 1024) {
      throw new Error('–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB');
    }

    if (!file.type.startsWith('image/')) {
      throw new Error('–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º bucket —Å retry –ª–æ–≥–∏–∫–æ–π
    console.log('üîç [BANNER_UPLOAD] Ensuring bucket exists...');
    await ensureBucketExists('banner-images');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const fileExt = file.name.split('.').pop();
    const timestamp = Date.now();
    const randomId = Math.random().toString(36).substring(7);
    const fileName = `banner_${timestamp}_${randomId}.${fileExt}`;
    const filePath = `banners/${fileName}`;

    console.log('üìÅ [BANNER_UPLOAD] Upload details:', { fileName, filePath });

    // –°–æ–∑–¥–∞–µ–º Promise —Å timeout
    const uploadPromise = supabase.storage
      .from('banner-images')
      .upload(filePath, file, {
        cacheControl: '3600',
        upsert: false
      });

    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ')), uploadTimeout);
    });

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å timeout
    const { error: uploadError } = await Promise.race([uploadPromise, timeoutPromise]) as any;

    if (uploadError) {
      console.error('‚ùå [BANNER_UPLOAD] Upload error:', uploadError);
      throw new Error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${uploadError.message}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: { publicUrl } } = supabase.storage
      .from('banner-images')
      .getPublicUrl(filePath);

    if (!publicUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π URL');
    }

    console.log('‚úÖ [BANNER_UPLOAD] Upload successful:', publicUrl);

    toast({ title: "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ" });
    return publicUrl;
  } catch (error: any) {
    console.error('‚ùå [BANNER_UPLOAD] Upload failed:', error);
    
    let errorMessage = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
    if (error.message.includes('timeout') || error.message.includes('–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ')) {
      errorMessage = "–í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑";
    } else if (error.message.includes('—Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π')) {
      errorMessage = "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 5MB";
    } else if (error.message.includes('–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º')) {
      errorMessage = "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è";
    } else {
      errorMessage = error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏";
    }
    
    toast({ 
      title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", 
      description: errorMessage,
      variant: "destructive" 
    });
    throw error;
  }
};
