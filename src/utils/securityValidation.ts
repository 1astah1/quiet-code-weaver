// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
export class SecurityValidator {
  // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è UUID
  static validateUUID(uuid: string): boolean {
    const uuidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return uuidRegex.test(uuid);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–Ω–µ—Ç —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è
  static validateCoins(amount: number): boolean {
    return Number.isInteger(amount) && 
           amount >= 0 && 
           amount <= 10000000 && // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
           !Number.isNaN(amount);
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã —Å–∫–∏–Ω–∞
  static validateSkinPrice(price: number): boolean {
    return Number.isInteger(price) && 
           price >= 0 && 
           price <= 1000000;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
  static detectSuspiciousActivity(actionType: string, frequency: number): boolean {
    const limits: Record<string, number> = {
      'case_open': 20, // –º–∞–∫—Å–∏–º—É–º 20 –æ—Ç–∫—Ä—ã—Ç–∏–π –≤ –º–∏–Ω—É—Ç—É
      'skin_sell': 10, // –º–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–¥–∞–∂ –≤ –º–∏–Ω—É—Ç—É
    };
    
    return frequency > (limits[actionType] || 5);
  }

  // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ –æ—Ç XSS
  static sanitizeString(input: string): string {
    return input
      .replace(/[<>'"&]/g, (char) => {
        const entities: Record<string, string> = {
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#x27;',
          '&': '&amp;'
        };
        return entities[char] || char;
      })
      .trim()
      .slice(0, 1000); // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
  static validateTimeInterval(lastAction: Date, minIntervalMs: number): boolean {
    return Date.now() - lastAction.getTime() >= minIntervalMs;
  }
}

// –£–ª—É—á—à–µ–Ω–Ω—ã–π –∞—É–¥–∏—Ç —Å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
export const secureAuditLog = async (
  userId: string,
  action: string,
  details: Record<string, any>,
  success: boolean = true,
  riskLevel: 'low' | 'medium' | 'high' = 'low'
) => {
  try {
    const auditEntry = {
      timestamp: new Date().toISOString(),
      userId: SecurityValidator.sanitizeString(userId),
      action: SecurityValidator.sanitizeString(action),
      details: details,
      success,
      riskLevel,
      userAgent: navigator.userAgent,
      sessionId: sessionStorage.getItem('session_id') || 'unknown',
      ip: 'client-side'
    };

    console.log(`üîí SECURITY AUDIT [${riskLevel.toUpperCase()}]:`, auditEntry);

    // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∞—É–¥–∏—Ç–∞
    if (riskLevel === 'high') {
      console.warn('üö® HIGH RISK ACTIVITY DETECTED:', auditEntry);
    }
  } catch (error) {
    console.error('Failed to log security audit:', error);
  }
};
