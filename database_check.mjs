import { createClient } from '@supabase/supabase-js';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Supabase
const SUPABASE_URL = "https://vrxtrkabuasyfosmvgzp.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InZyeHRya2FidWFzeWZvc212Z3pwIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTA2Njc2MDYsImV4cCI6MjA2NjI0MzYwNn0.8R_KLf5QjmAXuyrUCMYBDGQZgeTCwrGmkJu7ZtcvO_o";

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

async function checkDatabaseHealth() {
    console.log('=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ===\n');

    try {
        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        console.log('1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const { data: testData, error: testError } = await supabase
            .from('users')
            .select('count')
            .limit(1);
        
        if (testError) {
            console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', testError.message);
            return;
        }
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ\n');

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        console.log('2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...');
        const tables = [
            'users', 'skins', 'cases', 'case_skins', 'user_inventory',
            'user_favorites', 'recent_wins', 'user_quiz_progress',
            'referral_earnings', 'user_promo_codes', 'user_steam_settings',
            'promo_codes', 'banners', 'suspicious_activities'
        ];

        for (const table of tables) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);
                
                if (error) {
                    console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${error.message}`);
                } else {
                    console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –¥–æ—Å—Ç—É–ø–Ω–∞`);
                }
            } catch (err) {
                console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table}: ${err.message}`);
            }
        }
        console.log('');

        // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü–∞—Ö
        console.log('3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö...');
        const mainTables = ['users', 'skins', 'cases', 'case_skins'];
        
        for (const table of mainTables) {
            try {
                const { count, error } = await supabase
                    .from(table)
                    .select('*', { count: 'exact', head: true });
                
                if (error) {
                    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ ${table}: ${error.message}`);
                } else {
                    console.log(`üìä –¢–∞–±–ª–∏—Ü–∞ ${table}: ${count} –∑–∞–ø–∏—Å–µ–π`);
                }
            } catch (err) {
                console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ ${table}: ${err.message}`);
            }
        }
        console.log('');

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π —á–µ—Ä–µ–∑ RPC
        console.log('4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–π
        const { data: testUser } = await supabase
            .from('users')
            .select('id, coins')
            .limit(1);
        
        const { data: testCase } = await supabase
            .from('cases')
            .select('id, price')
            .limit(1);

        if (testUser && testUser.length > 0 && testCase && testCase.length > 0) {
            console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π');
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é cs2_open_case (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–æ–Ω–µ—Ç)
            try {
                const { data: caseResult, error: caseError } = await supabase
                    .rpc('cs2_open_case', {
                        p_user_id: testUser[0].id,
                        p_case_id: testCase[0].id
                    });
                
                if (caseError) {
                    console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è cs2_open_case: ${caseError.message}`);
                } else {
                    console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è cs2_open_case —Ä–∞–±–æ—Ç–∞–µ—Ç: ${caseResult?.success}`);
                }
            } catch (err) {
                console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è cs2_open_case: ${err.message}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é purchase_skin
            try {
                const { data: skinData } = await supabase
                    .from('skins')
                    .select('id, price')
                    .limit(1);
                
                if (skinData && skinData.length > 0) {
                    const { data: purchaseResult, error: purchaseError } = await supabase
                        .rpc('purchase_skin', {
                            p_user_id: testUser[0].id,
                            p_skin_id: skinData[0].id
                        });
                    
                    if (purchaseError) {
                        console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è purchase_skin: ${purchaseError.message}`);
                    } else {
                        console.log(`‚úÖ –§—É–Ω–∫—Ü–∏—è purchase_skin —Ä–∞–±–æ—Ç–∞–µ—Ç: ${purchaseResult?.success}`);
                    }
                }
            } catch (err) {
                console.log(`‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è purchase_skin: ${err.message}`);
            }
        } else {
            console.log('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π');
        }
        console.log('');

        // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
        console.log('5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π...');
        
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º user_inventory -> users
            const { data: inventoryUsers, error: inventoryError } = await supabase
                .from('user_inventory')
                .select(`
                    id,
                    users!inner(id)
                `)
                .limit(1);
            
            if (inventoryError) {
                console.log(`‚ùå –°–≤—è–∑—å user_inventory -> users: ${inventoryError.message}`);
            } else {
                console.log('‚úÖ –°–≤—è–∑—å user_inventory -> users —Ü–µ–ª–æ—Å—Ç–Ω–∞');
            }
        } catch (err) {
            console.log(`‚ùå –°–≤—è–∑—å user_inventory -> users: ${err.message}`);
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º case_skins -> cases
            const { data: caseSkins, error: caseSkinsError } = await supabase
                .from('case_skins')
                .select(`
                    id,
                    cases!inner(id)
                `)
                .limit(1);
            
            if (caseSkinsError) {
                console.log(`‚ùå –°–≤—è–∑—å case_skins -> cases: ${caseSkinsError.message}`);
            } else {
                console.log('‚úÖ –°–≤—è–∑—å case_skins -> cases —Ü–µ–ª–æ—Å—Ç–Ω–∞');
            }
        } catch (err) {
            console.log(`‚ùå –°–≤—è–∑—å case_skins -> cases: ${err.message}`);
        }
        console.log('');

        // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫
        console.log('6. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫...');
        const tablesWithRLS = ['users', 'user_inventory', 'user_favorites', 'recent_wins'];
        
        for (const table of tablesWithRLS) {
            try {
                const { data, error } = await supabase
                    .from(table)
                    .select('*')
                    .limit(1);
                
                if (error && error.message.includes('policy')) {
                    console.log(`‚ùå RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è ${table}: ${error.message}`);
                } else {
                    console.log(`‚úÖ RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –¥–ª—è ${table} –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
                }
            } catch (err) {
                console.log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –¥–ª—è ${table}: ${err.message}`);
            }
        }
        console.log('');

        // 7. –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
        console.log('=== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===');
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        console.log('üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω—ã:');
        console.log('   - –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
        console.log('   - –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü');
        console.log('   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö');
        console.log('   - –†–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π');
        console.log('   - –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏');
        console.log('   - RLS –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
        console.log('');
        console.log('–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ (‚ùå), –∏—Ö –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.');
        console.log('–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚ö†Ô∏è), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.');
        console.log('–í—Å–µ –≥–∞–ª–æ—á–∫–∏ (‚úÖ) –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');

    } catch (error) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkDatabaseHealth(); 