-- Database Health Check Script
-- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤—Å–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

-- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
DO $$
DECLARE
    table_name text;
    missing_tables text[] := ARRAY[]::text[];
    required_tables text[] := ARRAY[
        'users', 'skins', 'cases', 'case_skins', 'user_inventory', 
        'user_favorites', 'recent_wins', 'user_quiz_progress',
        'referral_earnings', 'user_promo_codes', 'user_steam_settings',
        'promo_codes', 'banners', 'suspicious_activity'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü ===';
    
    FOREACH table_name IN ARRAY required_tables
    LOOP
        IF NOT EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name = table_name) THEN
            missing_tables := array_append(missing_tables, table_name);
            RAISE NOTICE '‚ùå –¢–∞–±–ª–∏—Ü–∞ % –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', table_name;
        ELSE
            RAISE NOTICE '‚úÖ –¢–∞–±–ª–∏—Ü–∞ % —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', table_name;
        END IF;
    END LOOP;
    
    IF array_length(missing_tables, 1) > 0 THEN
        RAISE NOTICE '–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: %', array_to_string(missing_tables, ', ');
    END IF;
END $$;

-- 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
DO $$
DECLARE
    func_name text;
    missing_functions text[] := ARRAY[]::text[];
    required_functions text[] := ARRAY[
        'cs2_open_case', 'purchase_skin', 'final_sell_item',
        'handle_new_user'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π ===';
    
    FOREACH func_name IN ARRAY required_functions
    LOOP
        IF NOT EXISTS (SELECT 1 FROM pg_proc WHERE proname = func_name) THEN
            missing_functions := array_append(missing_functions, func_name);
            RAISE NOTICE '‚ùå –§—É–Ω–∫—Ü–∏—è % –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', func_name;
        ELSE
            RAISE NOTICE '‚úÖ –§—É–Ω–∫—Ü–∏—è % —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', func_name;
        END IF;
    END LOOP;
    
    IF array_length(missing_functions, 1) > 0 THEN
        RAISE NOTICE '–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏: %', array_to_string(missing_functions, ', ');
    END IF;
END $$;

-- 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
DO $$
DECLARE
    trigger_name text;
    missing_triggers text[] := ARRAY[]::text[];
    required_triggers text[] := ARRAY[
        'on_auth_user_created'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ===';
    
    FOREACH trigger_name IN ARRAY required_triggers
    LOOP
        IF NOT EXISTS (SELECT 1 FROM pg_trigger WHERE tgname = trigger_name) THEN
            missing_triggers := array_append(missing_triggers, trigger_name);
            RAISE NOTICE '‚ùå –¢—Ä–∏–≥–≥–µ—Ä % –Ω–µ –Ω–∞–π–¥–µ–Ω', trigger_name;
        ELSE
            RAISE NOTICE '‚úÖ –¢—Ä–∏–≥–≥–µ—Ä % —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', trigger_name;
        END IF;
    END LOOP;
    
    IF array_length(missing_triggers, 1) > 0 THEN
        RAISE NOTICE '–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç—Ä–∏–≥–≥–µ—Ä—ã: %', array_to_string(missing_triggers, ', ');
    END IF;
END $$;

-- 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫
DO $$
DECLARE
    table_name text;
    policy_count integer;
    tables_with_policies text[] := ARRAY[
        'users', 'user_inventory', 'user_favorites', 'recent_wins',
        'user_quiz_progress', 'referral_earnings', 'user_promo_codes',
        'user_steam_settings'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ RLS –ø–æ–ª–∏—Ç–∏–∫ ===';
    
    FOREACH table_name IN ARRAY tables_with_policies
    LOOP
        SELECT COUNT(*) INTO policy_count 
        FROM pg_policies 
        WHERE tablename = table_name;
        
        IF policy_count = 0 THEN
            RAISE NOTICE '‚ùå –¢–∞–±–ª–∏—Ü–∞ % –Ω–µ –∏–º–µ–µ—Ç RLS –ø–æ–ª–∏—Ç–∏–∫', table_name;
        ELSE
            RAISE NOTICE '‚úÖ –¢–∞–±–ª–∏—Ü–∞ % –∏–º–µ–µ—Ç % –ø–æ–ª–∏—Ç–∏–∫', table_name, policy_count;
        END IF;
    END LOOP;
END $$;

-- 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤
DO $$
DECLARE
    index_name text;
    missing_indexes text[] := ARRAY[]::text[];
    required_indexes text[] := ARRAY[
        'idx_users_auth_id'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–¥–µ–∫—Å–æ–≤ ===';
    
    FOREACH index_name IN ARRAY required_indexes
    LOOP
        IF NOT EXISTS (SELECT 1 FROM pg_indexes WHERE indexname = index_name) THEN
            missing_indexes := array_append(missing_indexes, index_name);
            RAISE NOTICE '‚ùå –ò–Ω–¥–µ–∫—Å % –Ω–µ –Ω–∞–π–¥–µ–Ω', index_name;
        ELSE
            RAISE NOTICE '‚úÖ –ò–Ω–¥–µ–∫—Å % —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', index_name;
        END IF;
    END LOOP;
    
    IF array_length(missing_indexes, 1) > 0 THEN
        RAISE NOTICE '–í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–Ω–¥–µ–∫—Å—ã: %', array_to_string(missing_indexes, ', ');
    END IF;
END $$;

-- 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
DO $$
DECLARE
    table_name text;
    row_count bigint;
    tables_to_check text[] := ARRAY[
        'users', 'skins', 'cases', 'case_skins'
    ];
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö ===';
    
    FOREACH table_name IN ARRAY tables_to_check
    LOOP
        EXECUTE format('SELECT COUNT(*) FROM %I', table_name) INTO row_count;
        RAISE NOTICE 'üìä –¢–∞–±–ª–∏—Ü–∞ % —Å–æ–¥–µ—Ä–∂–∏—Ç % –∑–∞–ø–∏—Å–µ–π', table_name, row_count;
    END LOOP;
END $$;

-- 7. –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ cs2_open_case (–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ)
DO $$
DECLARE
    test_user_id uuid;
    test_case_id uuid;
    result jsonb;
BEGIN
    RAISE NOTICE '=== –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ cs2_open_case ===';
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    SELECT id INTO test_user_id FROM users LIMIT 1;
    SELECT id INTO test_case_id FROM cases LIMIT 1;
    
    IF test_user_id IS NOT NULL AND test_case_id IS NOT NULL THEN
        BEGIN
            -- –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é (–º–æ–∂–µ—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –º–æ–Ω–µ—Ç)
            SELECT cs2_open_case(test_user_id, test_case_id) INTO result;
            RAISE NOTICE '‚úÖ –§—É–Ω–∫—Ü–∏—è cs2_open_case –≤—ã–ø–æ–ª–Ω–∏–ª–∞—Å—å: %', result->>'success';
        EXCEPTION
            WHEN OTHERS THEN
                RAISE NOTICE '‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è cs2_open_case –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É: %', SQLERRM;
        END;
    ELSE
        RAISE NOTICE '‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è cs2_open_case';
    END IF;
END $$;

-- 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏
DO $$
DECLARE
    broken_links integer;
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π ===';
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ user_inventory -> users
    SELECT COUNT(*) INTO broken_links 
    FROM user_inventory ui 
    LEFT JOIN users u ON ui.user_id = u.id 
    WHERE u.id IS NULL;
    
    IF broken_links > 0 THEN
        RAISE NOTICE '‚ùå –ù–∞–π–¥–µ–Ω–æ % –∑–∞–ø–∏—Å–µ–π –≤ user_inventory —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ user_id', broken_links;
    ELSE
        RAISE NOTICE '‚úÖ –°–≤—è–∑—å user_inventory -> users —Ü–µ–ª–æ—Å—Ç–Ω–∞';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ user_inventory -> skins
    SELECT COUNT(*) INTO broken_links 
    FROM user_inventory ui 
    LEFT JOIN skins s ON ui.skin_id = s.id 
    WHERE s.id IS NULL;
    
    IF broken_links > 0 THEN
        RAISE NOTICE '‚ùå –ù–∞–π–¥–µ–Ω–æ % –∑–∞–ø–∏—Å–µ–π –≤ user_inventory —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ skin_id', broken_links;
    ELSE
        RAISE NOTICE '‚úÖ –°–≤—è–∑—å user_inventory -> skins —Ü–µ–ª–æ—Å—Ç–Ω–∞';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ case_skins -> cases
    SELECT COUNT(*) INTO broken_links 
    FROM case_skins cs 
    LEFT JOIN cases c ON cs.case_id = c.id 
    WHERE c.id IS NULL;
    
    IF broken_links > 0 THEN
        RAISE NOTICE '‚ùå –ù–∞–π–¥–µ–Ω–æ % –∑–∞–ø–∏—Å–µ–π –≤ case_skins —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ case_id', broken_links;
    ELSE
        RAISE NOTICE '‚úÖ –°–≤—è–∑—å case_skins -> cases —Ü–µ–ª–æ—Å—Ç–Ω–∞';
    END IF;
    
    -- –ü—Ä–æ–≤–µ—Ä–∫–∞ case_skins -> skins
    SELECT COUNT(*) INTO broken_links 
    FROM case_skins cs 
    LEFT JOIN skins s ON cs.skin_id = s.id 
    WHERE s.id IS NULL;
    
    IF broken_links > 0 THEN
        RAISE NOTICE '‚ùå –ù–∞–π–¥–µ–Ω–æ % –∑–∞–ø–∏—Å–µ–π –≤ case_skins —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ skin_id', broken_links;
    ELSE
        RAISE NOTICE '‚úÖ –°–≤—è–∑—å case_skins -> skins —Ü–µ–ª–æ—Å—Ç–Ω–∞';
    END IF;
END $$;

-- 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
DO $$
DECLARE
    slow_queries integer;
BEGIN
    RAISE NOTICE '=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===';
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
    SELECT COUNT(*) INTO slow_queries 
    FROM pg_stat_statements 
    WHERE mean_exec_time > 1000; -- –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
    
    IF slow_queries > 0 THEN
        RAISE NOTICE '‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ % –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤', slow_queries;
    ELSE
        RAISE NOTICE '‚úÖ –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ';
    END IF;
END $$;

-- 10. –ò—Ç–æ–≥–æ–≤–∞—è —Å–≤–æ–¥–∫–∞
DO $$
BEGIN
    RAISE NOTICE '=== –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===';
    RAISE NOTICE '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.';
    RAISE NOTICE '–ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ (‚ùå), –∏—Ö –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å.';
    RAISE NOTICE '–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è (‚ö†Ô∏è), —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ.';
    RAISE NOTICE '–í—Å–µ –≥–∞–ª–æ—á–∫–∏ (‚úÖ) –æ–∑–Ω–∞—á–∞—é—Ç, —á—Ç–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.';
END $$; 